generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(uuid()) @map("_id") 
  name                String
  email               String        @unique
  role                Role          @default(User)
  profilePic          String?       @default("https://sites.nicholas.duke.edu/clarklab/files/2011/01/default_profile-d80441a6f25a9a0aac354978c65c8fa9.jpg")
  associatedFan       Fan?
  associatedCelebrity Celebrity?
  associatedBusiness  Business?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Fan {
  id                  String        @id @default(uuid()) @map("_id") 
  name                String
  email               String        @unique
  location            String
  birthYear           DateTime?
  interests           String[]
  websiteLink         String?
  instagramLink       String?
  tiktokLink          String?
  facebookLink        String?
  twitterLink         String?
  youtubeLink         String?
  selfieImg           String?
  selfieVerified      Boolean       @default(false)
  locationImg         String?
  locationVerified    Boolean       @default(false)
  identityImg         String?
  identityVerified    Boolean       @default(false)
  reviewList          Review[]
  reservations        Reservation[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String        @unique
  savedCelIDs         String[]      
  savedCelebrities    Celebrity[]   @relation(fields: [savedCelIDs], references: [id])
  savedExpIDs         String[]
  savedExperiences    Work[]        @relation(name: "savedExp", fields: [savedExpIDs], references: [id])
  bookedExpIDs        String[]
  bookedExperiences   Work[]        @relation(name: "bookedExp", fields: [bookedExpIDs], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Celebrity {
  id                  String        @id @default(uuid()) @map("_id")
  name                String 
  email               String        @unique
  location            String
  nickname            String
  biography           String
  description         String
  associatedBrands    String[]
  categories          String[]
  birthYear           DateTime?
  gender              String
  languages           String[]
  interests           String[]
  websiteLink         String?
  instagramLink       String?
  tiktokLink          String?
  facebookLink        String?
  twitterLink         String?
  youtubeLink         String?
  selfieImg           String?
  selfieVerified      Boolean       @default(false)
  locationImg         String?
  locationVerified    Boolean       @default(false)
  identityImg         String?
  identityVerified    Boolean       @default(false)
  media               String[]
  rating              Int?
  reviewList          Review[]
  workList            Work[]
  drafts              String[]
  associatedUser      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedIDs            String[]      
  savedBy             Fan[]         @relation(fields: [savedIDs], references: [id])
  userId              String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Business {
  id                  String        @id @default(uuid()) @map("_id")
  name                String
  email               String        @unique
  businessEmail       String?
  location            String
  description         String
  categories          String[]
  // need to see what to do with social networks  
  selfieImg           String?
  selfieVerified      Boolean       @default(false)
  identityImg         String?
  identityVerified    Boolean       @default(false)
  associatedUser      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Work {
  id                  String        @id @default(uuid()) @map("_id") 
  title               String
  type                String
  price               Float
  shortDescription    String?
  description         String
  bookingInfo         String?
  duration            String
  productId           String?
  priceId             String?
  enabled             Boolean        @default(true)
  online              Boolean
  collaboration       Boolean
  language            String?
  categories          String[]
  inclusions          String[]
  exclusions          String[]
  filters             String[]
  availableMonths     Int[]          @default([])
  celebrity           Celebrity      @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  celebrityId         String         
  savedIDs            String[]
  savedBy             Fan[]          @relation(name: "savedExp", fields: [savedIDs], references: [id])
  bookedIDs           String[]
  bookedBy            Fan[]          @relation(name: "bookedExp", fields: [savedIDs], references: [id])
  reserves            Reservation[]
  timetable           Timetable?     
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Review {
  id                  String        @id @default(uuid()) @map("_id") 
  title               String
  date                DateTime      @default(now())
  description         String
  images              String[]
  stars               Float
  celebrity           Celebrity     @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  celebrityId         String        
  author              Fan           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId            String       
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Reservation {
  id                  String        @id @default(uuid()) @map("_id") 
  workId              String
  work                Work          @relation(fields: [workId], references: [id], onDelete: Cascade)
  fanId               String
  fan                 Fan           @relation(fields: [fanId], references: [id], onDelete: Cascade)
  reservationTime     DateTime
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Timetable {
    id                String        @id @default(uuid()) @map("_id") 
    months            String[]
    mondayTimes       String[]
    tuesdayTimes      String[]
    wednesdayTimes    String[]
    thursdayTimes     String[]
    fridayTimes       String[]
    saturdayTimes     String[]
    sundayTimes       String[]
    specialDays       SpecialDay[]
    bookedTimes       DateTime[]
    work              Work          @relation(fields: [workId], references: [id], onDelete: Cascade)
    workId            String        @unique
}

model SpecialDay {
    id                String        @id @default(uuid()) @map("_id") 
    times             String[]
    date              DateTime
    timetable         Timetable     @relation(fields: [timetableId], references: [id], onDelete: Cascade)
    timetableId       String
}

enum Role {
  User
  Admin
}

// celebrities have days. they can be available in these days if they have at least one experience slot available
// if all experience slots are taken, then the celebrity isn't available that day

// 'Work' model has a timetable attribute, which is an array of 'WorkDay' model.
// 'WorkDay' model has an array of strings, which represent time frames available for that experience (should validate with duration)

// how can I check celebrity availability ?
// well, they have associated 'Work' models, which have associated 'WorkDays' 