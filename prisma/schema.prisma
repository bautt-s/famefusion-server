generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(uuid()) @map("_id") 
  name                String
  email               String        @unique
  role                Role          @default(User)
  profilePic          String?       @default("https://sites.nicholas.duke.edu/clarklab/files/2011/01/default_profile-d80441a6f25a9a0aac354978c65c8fa9.jpg")
  associatedFan       Fan?
  associatedCelebrity Celebrity?
  associatedBusiness  Business?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Fan {
  id                  String        @id @default(uuid()) @map("_id") 
  name                String
  email               String        @unique
  location            String
  birthYear           DateTime?
  interests           String[]
  selfieImg           String?
  selfieVerified      Boolean       @default(false)
  locationImg         String?
  locationVerified    Boolean       @default(false)
  identityImg         String?
  identityVerified    Boolean       @default(false)
  reviewList          Review[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Celebrity {
  id                  String        @id @default(uuid()) @map("_id") 
  name                String 
  email               String        @unique
  location            String
  nickname            String
  biography           String
  description         String
  associatedBrands    String[]
  categories          String[]
  birthYear           DateTime?
  gender              String
  languages           String[]
  interests           String[]
  // need to see what to do with social networks
  selfieImg           String?
  selfieVerified      Boolean       @default(false)
  locationImg         String?
  locationVerified    Boolean       @default(false)
  identityImg         String?
  identityVerified    Boolean       @default(false)
  media               String[]
  rating              Int?
  availableDays       Day[]
  reviewList          Review[]
  workList            Work[]
  associatedUser      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Business {
  id                  String        @id @default(uuid()) @map("_id")
  name                String
  email               String        @unique
  businessEmail       String?
  location            String
  description         String
  categories          String[]
  // need to see what to do with social networks  
  selfieImg           String?
  selfieVerified      Boolean       @default(false)
  identityImg         String?
  identityVerified    Boolean       @default(false)
  associatedUser      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Work {
  id                  String        @id @default(uuid()) @map("_id") 
  title               String
  type                String
  price               Float
  description         String
  duration            String
  online              Boolean
  collaboration       Boolean
  celebrity           Celebrity      @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  celebrityId         String    
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Review {
  id                  String        @id @default(uuid()) @map("_id") 
  title               String
  date                DateTime      @default(now())
  description         String
  images              String[]
  stars               Float
  celebrity           Celebrity     @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  celebrityId         String 
  author              Fan           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId            String 
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Day {
  id            String              @id @map("_id") 
  celebrity     Celebrity           @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  celebrityId   String              @unique
  date          DateTime
}

enum Role {
  User
  Admin
}